
* simpleclip
#+begin_src elisp
  (use-package simpleclip)
  (setq simpleclip-mode 1)

#+end_src
* dired
#+begin_src elisp
  (setq dired-listing-switches "-alFh --group-directories-first")

(use-package dired-subtree 
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  ;; Colourful columns.
  (use-package diredfl
    :config
    (diredfl-global-mode 1)))

(require 'dired-x)
(add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))

(setq dired-omit-files
      (rx (or (seq bol (? ".") "#")     ;; emacs autosave files
              (seq bol "." (not (any "."))) ;; dot-files
              (seq "~" eol)                 ;; backup-files
              (seq bol "CVS" eol)           ;; CVS dirs
              )))

      (add-hook 'dired-mode-hook
		(lambda ()
		  (dired-hide-details-mode)
					; make dired use the same buffer for viewing directory
		  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
		  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
		  ))
#+end_src
* backup
#+begin_src elisp
  (setq
 ;; Don't clobber symlinks
 backup-by-copying t
 backup-directory-alist
 ;; Don't litter my fs tree
 '(("." . "~/.backups"))
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 ;; Use versioned backups
 version-control t)
#+end_src
* babel
#+begin_src elisp
  (setq org-confirm-babel-evaluate nil)
(setq org-babel-default-header-args
      (cons '(:results . "value silent")
            (assq-delete-all :results org-babel-default-header-args)))
#+end_src
** php
#+begin_src elisp
  (use-package php-mode)
  (defun org-babel-execute:php (body params)
  "Orgmode Babel PHP evaluate function for `BODY' with `PARAMS'."
  (let* ((cmd "php")
         (body (concat "<?php\n" body "\n?>")))
    (org-babel-eval cmd body)
    ))
#+end_src
* journal
#+begin_src elisp
  (setq org-capture-templates
      '(("j" "journal" entry (file+datetree "~/aamystuff/life/journal.gpg")
         "* %?\n%U\n  %i\n")
      ("d" "dreams" entry (file+datetree "~/aamystuff/life/dreams.gpg")
        "* %?\n%U\n  %i\n")))
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src
* calendar
#+begin_src elisp
  (setq calendar-week-start-day 1)
  (defun c () "Shortcut for CALENDAR (without any argument)" (interactive) (calendar))
#+end_src
* movement
#+begin_src elisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src
* history for searching
#+begin_src elisp
  (use-package prescient
  :config
  (setq-default history-length 1000)
  (setq-default prescient-history-length 1000)
  (prescient-persist-mode +1))

(use-package ivy-prescient
  :after ivy
  :config
  ;; don't prescient sort these commands
  (dolist (command '(org-ql-view counsel-find-file fontaine-set-preset))
    (setq ivy-prescient-sort-commands (append ivy-prescient-sort-commands (list command))))
  (ivy-prescient-mode +1))
#+end_src
* text
#+begin_src elisp
  (use-package hungry-delete  
  :config
  (global-hungry-delete-mode))
#+end_src
* treemacs
#+begin_src elisp
  (use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay   0.5
          treemacs-display-in-side-window     t
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-git-command-pipe           ""
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-max-git-entries            5000
          treemacs-no-png-images              nil
          treemacs-project-follow-cleanup     nil
          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-cursor                nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-asc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("M-1"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
(use-package treemacs-projectile
  :after treemacs projectile)
#+end_src
* auto
#+begin_src  elisp
  (use-package which-key
    :config (which-key-mode))
#+end_src
* todo
#+begin_src elisp
  (setq org-todo-keywords
        '(
          (sequence "REPEAT" "DOING" "TODO" "NEXT" "WAITING" "SOMEDAY" "LOOKING-FOR" "DONE")
          (sequence "|" "CANCELED(c)" "RECONSIDER(@)")
          ))
  
  (setq org-log-done 'time)
#+end_src
* logbook
#+begin_src elisp
  (add-to-list 'org-log-note-headings '(note . "%t"))
#+end_src
* scratch buffer
#+begin_src elisp
  (setq initial-major-mode 'org-mode)
#+end_src
* gpg
gpg --gen-key

#+begin_src text
-*- mode: org -*- -*- epa-file-encrypt-to: ("slawomir.grochowski@gmail.com") -*-
#+end_src

#+begin_src emacs-lisp
(setq epg-gpg-home-directory "~/.gnupg")
#+end_src
* org
#+begin_src elisp
  (require 'org-tempo)
  (setq org-special-ctrl-a/e t) ;; ctrl a move to beginig of headline not line
  (use-package org-bullets)
  (use-package org
  :hook ((org-mode . org-indent-mode)
         (org-mode . org-bullets-mode))
  :config
  (setq org-startup-folded t)
  (setq-default org-catch-invisible-edits 'error)) ;; prevent deleting invisible text
#+end_src
** agenda
#+begin_src elisp
  (global-set-key "\C-ca" 'org-agenda)

  (setq org-agenda-files '(
                             "~/aamystuff/mystuff/index.org"
                             "~/aamystuff/life/life.org.gpg"
                             "~/aamystuff/phprefactor/phprefactor.org"
                             ))
    (add-hook 'org-agenda-finalize-hook
              (lambda ()
                (save-excursion
                  (goto-char (point-min))
                  (when (re-search-forward
                         "Global list of TODO items of type: [[:upper:]]*" nil t)
                    (insert (propertize
                             (format " (%s remaining)"
                                     (- (count-lines (point-min) (point-max)) 2))
                             'face 'font-lock-comment-face))))))

    (setq org-agenda-sorting-strategy (quote ((todo todo-state-up priority-down))))

    (defun yashi/org-agenda (&optional arg)
      (interactive "P")
      (let ((org-agenda-tag-filter-preset '("-book")))
        (org-agenda arg "t")))

    (setq org-agenda-custom-commands
          '(("w" "Weekly review"
             agenda ""
             ((org-agenda-start-day "-14d")
              (org-agenda-span 14)
              (org-agenda-start-on-weekday 1)
              (org-agenda-start-with-log-mode '(closed))
              (org-agenda-archives-mode t)
              (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "^\\*\\* DONE "))))
            ("n" "Agenda and all TODOs"
             agenda ""
             ((alltodo "")))
            ))
#+end_src

#+RESULTS:
| w | Weekly review        | agenda |   | ((org-agenda-start-day -14d) (org-agenda-span 14) (org-agenda-start-on-weekday 1) (org-agenda-start-with-log-mode '(closed)) (org-agenda-archives-mode t) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ^\*\* DONE ))) |
| n | Agenda and all TODOs | agenda |   | ((alltodo ))                                                                                                                                                                                                                             |

* theme
#+begin_src elisp
  (setq custom-theme-allow-multiple-selections nil)
  (use-package doom-themes)

  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
#+end_src
* swiper
#+begin_src elisp
  (use-package swiper      
    :bind    
    (("C-f" . swiper)    
     ("M-x" . counsel-M-x)   
     ("C-x b" . ivy-switch-buffer)  
     ("C-x f" . counsel-find-file)    
     ("C-h f" . counsel-describe-function)
     ("C-h l" . counsel-find-library)
     ("C-c C-r" . ivy-resume))
    :config  
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)    
    (setq ivy-count-format "(%d/%d) ")
    (use-package counsel))

  (use-package ivy-rich)
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src
* scroling
#+begin_src elisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (setq scroll-step 1) ;; keyboard scroll one line at a time
  
#+end_src
* paste link
#+begin_src elisp
  (defun youtube-link-insert ()
  (interactive)
  (let* ((link (read-from-minibuffer "Youtube-Link:"))
         (title (string-trim (shell-command-to-string (format "youtube-dl --get-title '%s' 2>/dev/null" link))))
	 (save-excursion
	   (insert (format "[[%s][%s]]" link title))
	   ))))
#+end_src

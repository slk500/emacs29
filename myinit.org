
* help system
#+begin_src elisp
  (use-package elisp-demos
    :straight (:host github :repo "xuchunyang/elisp-demos"))

(advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1)
#+end_src
* books
#+begin_src elisp
(use-package nov)
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(use-package saveplace-pdf-view)
(save-place-mode 1)
#+end_src
** pdf
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight (:host github :repo "vedang/pdf-tools")
    :init (pdf-tools-install)
    :custom
    (pdf-view-midnight-colors '("#ffffff" . "#000000"))
    :config
    
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer))

  (add-hook 'pdf-view-mode-hook (lambda ()
                                  (pdf-view-midnight-minor-mode)))

  ;;(setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; set the amber 
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward-regexp)

  ;; (use-package org-pdftools
  ;;   :config ;;(setq org-pdftools-root-dir "~/aamyproject/books")
  ;;   (with-eval-after-load 'org
  ;;     (org-link-set-parameters "pdf"
  ;;                              :follow #'org-pdftools-open
  ;;                              :complete #'org-pdftools-complete-link
  ;;                              :store #'org-pdftools-store-link
  ;;                             ;; :export #'org-pdftools-export
  ;; )
  ;;     (add-hook 'org-store-link-functions 'org-pdftools-store-link)))
#+END_SRC
* non brake space
#+begin_src elisp
(setq nobreak-char-display nil)
#+end_src
* clojure
#+begin_src elisp
  (require 'ob-clojure)
  (use-package cider)
  (require 'cider)  
  (setq org-babel-clojure-backend 'cider)

  (org-defkey org-mode-map "\C-x\C-e" 'cider-eval-last-sexp)
#+end_src

https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html
https://github.com/clojure-emacs/cider/issues/1819
http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/
** clojure :results output
`#+begin_src clojure :results output
(inc 1)
`#+end_src
Wrong type argument: arrayp, nil

Czemu jest błąd? 
Działa z value:
`#+begin_src clojure :results value
(inc 1)
`#+end_src
* yasnipet
#+begin_src elisp
  (use-package yasnippet
  :config
  (setq yas-snippet-dirs `("~/aamystuff/emacs/snippets"))
  (yas-global-mode 1))
#+end_src
* php
** phpunit
   #+BEGIN_SRC emacs-lisp 
(use-package phpunit)

(defcustom ob-php:inf-php-buffer "*phpunit*"
  "Default PHP inferior buffer."
  :group 'ob-php
  :type 'string)

(defcustom ob-php:inf-php-buffer "*php*"
  "Default PHP inferior buffer."
  :group 'ob-php
  :type 'string)

   ;;;###autoload
(eval-after-load "org"
  '(add-to-list 'org-src-lang-modes '("phpunit" . php)))

(defvar org-babel-default-header-args:phpunit '())

(add-to-list 'org-babel-default-header-args:phpunit
	     '(:results . "output"))

(defvar org-babel-default-header-args:php '())

(add-to-list 'org-babel-default-header-args:php
	     '(:results . "output"))

   ;;;###autoload
(defun org-babel-execute:phpunit (body params)
  "Orgmode Babel PHP evaluate function for `BODY' with `PARAMS'."
  (let* ((cmd (concat(file-name-directory buffer-file-name) "../phprefactor/phpunithack.sh"))
	 (body (concat "<?php\n" body "\n?>")))
    (write-region body  nil (concat(file-name-directory buffer-file-name) "../phprefactor/test.php"))
    (org-babel-eval cmd body)
    ))

   #+END_SRC

   https://www.philnewton.net/guides/emacs-as-a-php-editor/
** php
#+BEGIN_SRC emacs-lisp

(defgroup ob-php nil
  "org-mode blocks for PHP."
  :group 'org)

(defcustom ob-php:inf-php-buffer "*php*"
  "Default PHP inferior buffer."
  :group 'ob-php
  :type 'string)

;;;###autoload
(defun org-babel-execute:php (body params)
  "Orgmode Babel PHP evaluate function for `BODY' with `PARAMS'."
  (let* ((cmd "php")
         (body (concat "<?php\n" body "\n?>")))
    (org-babel-eval cmd body)
    ))

;;;###autoload
(eval-after-load "org"
  '(add-to-list 'org-src-lang-modes '("php" . php)))

(defvar org-babel-default-header-args:php '())

(add-to-list 'org-babel-default-header-args:php
             '(:results . "output"))

(provide 'ob-php)

#+END_SRC
* compare windows
#+begin_src elisp
  (global-set-key "\C-cw" 'compare-windows)
#+end_src
* count number of headings
#+begin_src elisp
 (defun my-no-of-headings ()
    (interactive)
    (save-excursion
      (length (org-map-entries t t 'tree))))
#+end_src
* back to last edit
#+begin_src elisp
(defun mu-back-to-last-edit ()
  "Jump back to the last change in the current buffer."
  (interactive)
  (ignore-errors
    (let ((inhibit-message t))
      (undo-only)
      (undo-redo))))
#+end_src
* search web
#+begin_src elisp
(use-package engine-mode
  :config
  (engine-mode t))

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")
#+end_src
* TODO https://github.com/danielsz/Palimpsest
* TODO dates how to add days to date
#+begin_src elisp
(defun shift-date (date days)
  (format-time-string
   "%F"
   (time-add (time-to-seconds (days-to-time days))
             (time-to-seconds (org-time-string-to-time date)))))

(defun shift-dates (days)
  (interactive "nDays: ")
  (save-excursion
    (goto-char (point-min))
    (while (not (eobp))
      (forward-char 1)
      (when (looking-at iso8601--full-date-match)
        (let ((date (shift-date (match-string 0) days)))
          (save-excursion
            (while (looking-at "[^\s\\|\n]")
              (delete-char 1))
            (insert date)))))))
#+end_src
* TODO timer
* modeline
#+begin_src elisp
  ;; (setq-default mode-line-format '("%e" mode-line-front-space
  ;;                                  (:propertize
  ;;                                   ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
  ;;                                   display
  ;;                                   (min-width
  ;;                                    (4.0)))
  ;;                                  mode-line-frame-identification mode-line-buffer-identification " " mode-line-position
  ;;                                  (vc-mode vc-mode)
  ;;                                  " " mode-line-misc-info mode-line-end-spaces))
  (setq column-number-mode t)
#+end_src
* desktop-save-mode
#+begin_src elisp
  ;; (setq desktop-dirname             "~/.emacs.d/desktop/"
  ;;    desktop-base-file-name      "emacs.desktop"
  ;;    desktop-base-lock-name      "lock"
  ;;    desktop-path                (list desktop-dirname)
  ;;    desktop-save                t
  ;;    desktop-files-not-to-save   "^$" ;reload tramp paths
  ;;    desktop-load-locked-desktop nil
  ;;    desktop-auto-save-timeout   30)
  ;;    (desktop-save-mode 1)
#+end_src
* iso week
#+begin_src elisp
(copy-face font-lock-constant-face 'calendar-iso-week-face)
(set-face-attribute 'calendar-iso-week-face nil
                    :height 0.7)
(set-face-attribute 'calendar-iso-week-face nil
                    :height 1.0 :foreground "salmon")

(setq calendar-intermonth-text
      '(propertize
        (format "W%02d "
                (car
                 (calendar-iso-from-absolute
                  (calendar-absolute-from-gregorian (list month day year)))))
        'font-lock-face 'calendar-iso-week-face))
#+end_src
* cleanup
#+begin_src elisp
  (global-unset-key (kbd "C-h <RET>")) ; view-order-manuals
  (global-unset-key (kbd "C-h g")) ; describe-gnu-project
#+end_src
* smooth scroling
#+BEGIN_SRC emacs-lisp
  (setq
   hscroll-step 1
   scroll-conservatively 1000)

  (use-package fast-scroll)
  (fast-scroll-config)
  (fast-scroll-mode 1)
#+END_SRC
* benchmark
#+begin_src sh
time emacs -nw -Q -eval '(kill-emacs)'
#+end_src
* buffer-local-keys
#+begin_src elisp
(defun buffer-local-set-key (key func)
      (interactive "KSet key on this buffer: \naCommand: ")
      (let ((name (format "%s-magic" (buffer-name))))
        (eval
         `(define-minor-mode ,(intern name)
            "Automagically built minor mode to define buffer-local keys."))
        (let* ((mapname (format "%s-map" name))
               (map (intern mapname)))
          (unless (boundp (intern mapname))
            (set map (make-sparse-keymap)))
          (eval
           `(define-key ,map ,key func)))
        (funcall (intern name) t)))
#+end_src
* command-log-mode
global-commannd-log-mode
clm/open-command-log-buffer
#+begin_src elisp
  (use-package command-log-mode)
#+end_src
* window move
#+begin_src elisp
  (defadvice split-window (after move-point-to-new-window activate)
    "Moves the point to the newly created window after splitting."
    (other-window 1))
#+end_src
* indent
#+begin_src elisp
  (setq electric-indent-mode nil)
#+end_src
* org
** log
#+begin_src elisp
  (add-hook 'org-log-buffer-setup-hook #'auto-fill-mode)
  (setq org-log-reschedule 'note)
#+end_src
** checkboxes
#+begin_src elisp
(setq org-checkbox-hierarchical-statistics nil)
#+end_src
** pomodoro
#+begin_src elisp
  (use-package org-pomodoro
     :config
     (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))

  (setq org-pomodoro-format "%s")
  (global-set-key (kbd "<f6>") 'org-pomodoro)
#+end_src
** tags
#+begin_src elisp
(setq org-tag-alist '(("book" . ?b)))
#+end_src
** settings
#+begin_src elisp
  (use-package org
   :straight
   (:type built-in)
   :config
   (setq-default org-catch-invisible-edits 'error) ;; prevent deleting invisible text
   (use-package org-bullets)
   (add-hook 'org-mode-hook 'org-bullets-mode)
   (add-hook 'org-mode-hook 'org-indent-mode)
   (add-hook 'org-mode-hook 'visual-line-mode)
   (use-package org-contrib)
   (setq org-startup-folded t)
   (setq org-log-into-drawer t)
   (setq org-special-ctrl-a/e t) ;; ctrl a move to beginig of headline not line
   (setq org-treat-insert-todo-heading-as-state-change t)
   (setq initial-major-mode 'org-mode)
   (require 'org-tempo)
   (require 'org-expiry)
   (require 'org-eldoc)
   (global-eldoc-mode 1)
   (setq org-src-tab-acts-natively t)
   )
#+end_src
** babel
#+begin_src elisp
   (setq org-confirm-babel-evaluate nil)
   (setq org-babel-default-header-args
         (cons '(:results . "output silent")
               (assq-delete-all :results org-babel-default-header-args)))
   (setq org-structure-template-alist (assoc-delete-all "e" org-structure-template-alist))
   (setq org-structure-template-alist (assoc-delete-all "c" org-structure-template-alist))
   (add-to-list 'org-structure-template-alist '("e" . "src elisp"))
   (add-to-list 'org-structure-template-alist '("c" . "src clojure"))
   (add-to-list 'org-structure-template-alist '("sh" . "src sh"))

  (org-babel-do-load-languages
   'org-babel-load-languages 
   '((shell . t)
     (clojure . t)))

#+end_src

*** php
#+begin_src elisp
  (use-package php-mode)
  (defun org-babel-execute:php (body params)
  "Orgmode Babel PHP evaluate function for `BODY' with `PARAMS'."
  (let* ((cmd "php")
         (body (concat "<?php\n" body "\n?>")))
    (org-babel-eval cmd body)
    ))
#+end_src
*** path
#+begin_src emacs-lisp
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
** agenda
#+begin_src elisp
    (setq org-agenda-custom-commands
            '(("b"
             "List of all books"
             tags-todo
             "book")))

    (setq org-agenda-hide-tags-regexp (regexp-opt '("book")))

    (global-set-key "\C-ca" 'org-agenda)
    (setq org-agenda-skip-scheduled-if-done t)

        (setq org-agenda-files '(
                                   "~/aamystuff/mystuff/index.org"
                                   "~/aamystuff/life/life.org.gpg"
                                   "~/aamystuff/phprefactor/phprefactor.org"
                                   "~/aamystuff/emacs/emacs.org"
                                   "~/aamystuff/clojure-examples/clojure-examples.org"
                                   ))
          (add-hook 'org-agenda-finalize-hook
                    (lambda ()
                      (save-excursion
                        (goto-char (point-min))
                        (when (or (re-search-forward "Global lit of TODO items of type: [[:upper:]]*" nil t)
                                  (re-search-forward "Headlines with TAGS match: [[:upper:]]*" nil t))
                          (insert (propertize
                                   (format " (%s remaining)"
                                           (- (count-lines (point-min) (point-max)) 2))
                                   'face 'font-lock-comment-face))))))

    (setq org-agenda-sorting-strategy '(
                                        (todo todo-state-up priority-down)
                                        (tags todo-state-up priority-down)
                                        ))
#+end_src
** [[https://emacs.stackexchange.com/questions/39478/emacs-not-loading-org-agenda-files-on-startup][Emacs not loading org-agenda-files on startup]]
** todo
:LOGBOOK:
CLOCK: [2022-10-02 Sun 05:35]--[2022-10-02 Sun 05:36] =>  0:01
CLOCK: [2022-10-02 Sun 05:24]--[2022-10-02 Sun 05:35] =>  0:11
- State "NEXT"       from "TODO"       [2022-10-02 Sun 05:24]
- State "TODO"       from              [2022-10-02 Sun 05:24]
:END:
#+begin_src elisp
    (setq org-todo-keywords
            '(
              (sequence "REPEAT(r!)" "DOING(o!)" "TODO(t!)" "NEXT(n!)" "WAITING(w!)" "SOMEDAY(!s)" "LOOKING-FOR(!l)"
                        "|" "CANCELED(c!)" "RECONSIDER(r!@)" "STUCK(k!)" "DONE(d!)")
              ))

    (setq org-use-fast-todo-selection 'expert) ; todo selection appear in the smaller minibuffer via
#+end_src
** logbook
#+begin_src elisp
  (add-to-list 'org-log-note-headings '(note . "%t"))
#+end_src
* display ^l glyphs as horizontal lines
#+begin_src elisp
  (use-package form-feed)
  (global-form-feed-mode)
#+end_src
* writing
** spelling
#+begin_src elisp
  (global-set-key (kbd "C-c f") 'flyspell-correct-word-before-point)
  (add-hook 'flyspell-mode-hook
            (lambda ()
              (setq flyspell-generic-check-word-predicate 'ignore-my-words)))
  ;;(defun ignore-my-word )
#+end_src
*** TODO ignore emails
https://superuser.com/questions/345084/how-to-exclude-in-flyspell-mode-and-flyspell-buffer/345461#345461
** synonyms
https://www.emacswiki.org/emacs/synonyms.el
#+begin_src elisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (require 'synonyms)
  (setq synonyms-file (concat user-emacs-directory "dictionary/mthesaur.txt"))
#+end_src
* dictionary
https://oremacs.com/2015/05/22/define-word/
https://github.com/SqrtMinusOne/reverso.el
https://www.masteringemacs.org/article/wordsmithing-in-emacs
#+begin_src emacs-lisp
(use-package define-word)
(global-set-key (kbd "C-c d") 'define-word-at-point)
(global-set-key (kbd "C-c D") 'define-word)
#+end_src
** TODO https://github.com/agzam/mw-thesaurus.el
#+begin_src elisp
  (use-package reverso
    :straight (:host github :repo "SqrtMinusOne/reverso.el"))
(setq reverso-languages '(english polish))
#+end_src
* bug tracker
#+begin_src elisp
(use-package debbugs)
#+end_src
* shortcuts
#+begin_src emacs-lisp
  (global-set-key (kbd "<f8>") 'visual-line-mode)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<f9>") 'centered-window-mode)
  (global-set-key (kbd "C-x 5") 'toggle-frame-split)
  ; (global-unset-key (kbd "M-<space>"))
#+END_SRC
* center
#+BEGIN_SRC emacs-lisp
(use-package centered-window)
#+END_SRC
* music
#+begin_src elisp
    (use-package bongo
    :ensure t :defer t
    :init (progn
            (setq bongo-default-directory "/media/slk/disk/Music"
                  bongo-confirm-flush-playlist nil
                  bongo-insert-whole-directory-trees t
                  bongo-action-track-icon nil
                  bongo-display-header-icons nil
                  bongo-logo nil
                  bongo-display-track-icons nil)))

  (setq-default bongo-next-action 'bongo-play-next)
  (global-set-key (kbd "C-c m") 'bongo-playlist)
#+end_src
* theme
#+begin_src elisp
  (use-package doom-themes)

  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)

  ;; (use-package jetbrains-darcula-theme
  ;;   :straight (:host github :repo "ianpan870102/jetbrains-darcula-emacs-theme")
  ;;   :custom
  ;;   (add-to-list 'custom-theme-load-path "~/.emacs.d/straight/repos/jetbrains-darcula-emacs-theme/")
  ;;   (load-theme 'jetbrains-darcula t))

  ;;(enable-theme 'jetbrains-darcula)
#+end_src
* cursor
#+begin_src elisp
  (setq-default cursor-type 'hollowe)
  (add-hook 'after-init-hook
            (lambda () (run-with-timer 1 nil #'set-cursor-color "#FDDA0D")))
#+end_src
* markdown
  #+begin_src elisp
(defun org-copy-region-as-markdown ()
  "Copy the region (in Org) to the system clipboard as Markdown."
  (interactive)
  (if (use-region-p)
      (let* ((region
	      (buffer-substring-no-properties
		      (region-beginning)
		      (region-end)))
	     (markdown
	      (org-export-string-as region 'md t '(:with-toc nil))))
	(gui-set-selection 'CLIPBOARD markdown))))
  #+end_src
* tags
https://www.reddit.com/r/orgmode/comments/pk7q1z/how_to_remove_a_tag_from_a_headline_in_org/
* copy/paste
#+begin_src elisp
  (defun my-copy-to-next-window (b e)
  "Copy text in the region to next window."
  (interactive "r")
  (pcase (window-list)
    (`(,w0 ,w1)
     (with-selected-window w1
       (insert-buffer-substring (window-buffer w0) b e)))
    (t (user-error "Only works with 2 windows"))))
#+end_src
** whole line
#+begin_src elisp
  (use-package whole-line-or-region)
#+end_src
* count
#+begin_src elisp
  (global-set-key (kbd "M-=") #'count-words)
#+end_src
* irc
#+begin_src elisp
  (require 'erc-services)
  (erc-services-mode 1)
  (setq erc-prompt-for-nickserv-password nil)
  (setq erc-nickserv-passwords
        '((irc.libera.chat (("slk500" . "DYUTsS88Cc4tt")))))

  (defun irc () "my irc" (interactive) (erc :server "irc.libera.chat" :port 6667 :nick "slk500" :password "DYUTsS88Cc4tt"))

  (setq erc-autojoin-channels-alist
        '(( "#emacs" "#systemcrafters")))

  (setq erc-hide-list '("JOIN" "PART" "QUIT"))


  (setq rcirc-default-nick "slk500")
 ;; (setq rcirc-authinfo '(("libera" nickserv "slk500" "DYUTsS88Cc4tt")))
  (setq rcirc-server-alist '((
                                   "irc.libera.chat"
                                   :channels ("#emacs")
                                   :port 6697
                                   :encryption tls)))
#+end_src
* simpleclip
#+begin_src elisp
;  (use-package simpleclip)
;  (setq simpleclip-mode 1)
#+end_src
* dired
#+begin_src elisp
  (use-package dired
    :straight (:type built-in)
    :custom ((dired-listing-switches "-alFh --group-directories-first")
             (dired-dwim-target t)
             (delete-by-moving-to-trash t)
             (dired-do-revert-buffer t)))

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)
  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  (setq split-width-threshold nil) ;If this is an integer, split-window-sensibly may split a window horizontally only if it has at least this many columns. 
 ;; Was 80 but moved back to nil -> because agenda view

  (use-package peep-dired
    :ensure t
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
                ("P" . peep-dired)))

  (use-package dired-subtree
    :after dired
      :bind (:map dired-mode-map
                  ("<tab>" . dired-subtree-toggle)
                  ("<C-tab>" . dired-subtree-cycle)
                  ("<S-iso-lefttab>" . dired-subtree-remove)
                  )
      )

  (use-package dired-filter)

    ;; Colourful columns
      (use-package diredfl
        :config
        (diredfl-global-mode 1))

      (require 'dired-x)
      (add-hook 'dired-mode-hook  #'dired-omit-mode)

  (setq dired-omit-files
                      (rx (or (seq bol (? ".") "#")     ;; emacs autosave files
                              (seq bol "." (not (any "."))) ;; dot-files
                              (seq "~" eol)                 ;; backup-files
                              (seq bol "CVS" eol)           ;; CVS dirs
                              )))

                      (add-hook 'dired-mode-hook
                                (lambda ()
                                  (dired-hide-details-mode)
                                                        ; make dired use the same buffer for viewing directory
                                  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
                                  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
                                  ))
#+end_src
* backup
#+begin_src elisp
  (setq
 ;; Don't clobber symlinks
 backup-by-copying t
 backup-directory-alist
 ;; Don't litter my fs tree
 '(("." . "~/.backups"))
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 ;; Use versioned backups
 version-control t)
#+end_src
* journal
#+begin_src elisp
  (setq org-capture-templates
      '(("j" "journal" entry (file+datetree "~/aamystuff/life/journal.gpg")
         "* %?\n%U\n  %i\n")
      ("d" "dreams" entry (file+datetree "~/aamystuff/life/dreams.gpg")
        "* %?\n%U\n  %i\n")))
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src
* calendar
#+begin_src elisp
  (setq calendar-week-start-day 1)
  (defalias 'cc 'calendar)
#+end_src
* movement
#+begin_src elisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src
* history for searching
#+begin_src elisp
  (use-package prescient
    :config
    (setq-default history-length 1000)
    (setq-default prescient-history-length 1000)
    (prescient-persist-mode +1))
  
  (use-package ivy-prescient
    :after ivy
    :config
    ;; don't prescient sort these commands
    (dolist (command '(org-ql-view counsel-find-file fontaine-set-preset))
      (setq ivy-prescient-sort-commands (append ivy-prescient-sort-commands (list command))))
    (ivy-prescient-mode +1))
#+end_src
* treemacs
#+begin_src elisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay   0.5
            treemacs-display-in-side-window     t
            treemacs-file-event-delay           5000
            treemacs-file-follow-delay          0.2
            treemacs-follow-after-init          t
            treemacs-follow-recenter-distance   0.1
            treemacs-git-command-pipe           ""
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-indentation                2
            treemacs-indentation-string         " "
            treemacs-is-never-other-window      nil
            treemacs-max-git-entries            5000
            treemacs-no-png-images              nil
            treemacs-project-follow-cleanup     nil
            treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-after-file-follow nil
            treemacs-recenter-after-tag-follow  nil
            treemacs-show-cursor                nil
            treemacs-show-hidden-files          t
            treemacs-silent-filewatch           nil
            treemacs-silent-refresh             nil
            treemacs-sorting                    'alphabetic-asc
            treemacs-space-between-root-nodes   t
            treemacs-tag-follow-cleanup         t
            treemacs-tag-follow-delay           1.5
            treemacs-width                      35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("M-1"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
* auto
#+begin_src  elisp
  (use-package which-key
    :config (which-key-mode))
#+end_src
* gpg
gpg --gen-key

#+begin_src text
-*- mode: org -*- -*- epa-file-encrypt-to: ("slawomir.grochowski@gmail.com") -*-
#+end_src

#+begin_src emacs-lisp
(setq epg-gpg-home-directory "~/.gnupg")
#+end_src
** authinfo
#+begin_src elisp
  (setq auth-source-debug t)
  (setq auth-sources
        '((:source "~/aamystuff/.authinfo.gpg")))
#+end_src
* swiper
#+begin_src elisp
     (use-package counsel)
     (use-package swiper      
       :bind    
       (
        ("C-f" . swiper)    
        ("M-x" . counsel-M-x)   
        ("C-x b" . ivy-switch-buffer)  
        ("C-x f" . counsel-find-file)    
        ("C-h f" . counsel-describe-function)
        ("C-h l" . counsel-find-library)
        ("C-c C-r" . ivy-resume))
       :config  
       (ivy-mode 1)
       (setq-default ivy-use-virtual-buffers t
                     ivy-count-format "(%d/%d) "
                     swiper-use-visual-line-p #'ignore)

       (ivy-configure 'counsel-M-x
         :initial-input "^"
         :display-transformer-fn #'counsel-M-x-transformer))

    (use-package ivy-rich)
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src
** ivy slow buffer list
   #+begin_src elisp
(eval-after-load 'ivy-rich
  (progn
    (defvar ek/ivy-rich-cache
      (make-hash-table :test 'equal))

    (defun ek/ivy-rich-cache-lookup (delegate candidate)
      (let ((result (gethash candidate ek/ivy-rich-cache)))
        (unless result
          (setq result (funcall delegate candidate))
          (puthash candidate result ek/ivy-rich-cache))
        result))

    (defun ek/ivy-rich-cache-reset ()
      (clrhash ek/ivy-rich-cache))

    (defun ek/ivy-rich-cache-rebuild ()
      (mapc (lambda (buffer)
              (ivy-rich--ivy-switch-buffer-transformer (buffer-name buffer)))
            (buffer-list)))

    (defun ek/ivy-rich-cache-rebuild-trigger ()
      (ek/ivy-rich-cache-reset)
      (run-with-idle-timer 1 nil 'ek/ivy-rich-cache-rebuild))

    (advice-add 'ivy-rich--ivy-switch-buffer-transformer :around 'ek/ivy-rich-cache-lookup)
    (advice-add 'ivy-switch-buffer :after 'ek/ivy-rich-cache-rebuild-trigger)))
   #+end_src
* scroling
#+begin_src elisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src
* paste link
#+begin_src elisp
  (defun youtube-link-insert ()
  (interactive)
  (let* ((link (read-from-minibuffer "Youtube-Link:"))
         (title (string-trim (shell-command-to-string (format "youtube-dl --get-title '%s' 2>/dev/null" link))))
	 (save-excursion
	   (insert (format "[[%s][%s]]" link title))
	   ))))
#+end_src
** TODO add uploded date
:LOGBOOK:
- State "TODO"       from              [2022-10-07 Fri 01:59]
:END:
** addign timestamp
#+begin_src elisp
(require 'thingatpt)

(defun yt-set-time (time)
  "Set TIME in the YouTube link at point.
TIME is number of seconds if called from Lisp, and a string if
called interactively. Supported formats:
- seconds
- minutes:seconds
- number of seconds with the \"s\" suffix."
  (interactive (list
                (if current-prefix-arg
                    (prefix-numeric-value current-prefix-arg)
                  (read-string "Time: "))))
  (let ((url (thing-at-point-url-at-point)))
    (if (and url
             (string-match
              (format "^%s"
                      (regexp-opt
                       '("https://www.youtube.com/"
                         "https://youtu.be/")
                       "\\(?:"))
              url))
        (let* ((bounds (thing-at-point-bounds-of-url-at-point))
               (time-present-p (string-match "t=[0-9]+" url))
               (question-mark-present-p (string-search "?" url))
               (seconds (cond
                         ((numberp time)
                          time)
                         ((string-match
                           "^\\([0-9]+\\):\\([0-9]\\{2\\}\\)$" time)
                          (+ (* 60 (string-to-number
                                    (match-string 1 time)))
                             (string-to-number (match-string 2 time))))
                         ((string-match "^\\([0-9]+\\)s?$" time)
                          (string-to-number (match-string 1 time)))
                         (t (error "Wrong argument format"))))
               (new-url (if time-present-p
                            (replace-regexp-in-string
                             "t=[0-9]+"
                             (format "t=%i" seconds)
                             url)
                          (concat url
                                  (if question-mark-present-p "&" "?")
                                  (format "t=%i" seconds)))))
          (delete-region (car bounds) (cdr bounds))
          (insert new-url))
      (error "Not on a Youtube link"))))
#+end_src

